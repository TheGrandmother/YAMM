module Sequencer

exports all
definitions

values
  subs_per_step: Ticks = 128
types

  Ticks = nat; -- Midi Pulses
  TimeStamp ::
    step : nat
    sub: nat
  inv mk_TimeStamp(-, sub) == sub < subs_per_step
  ord t1 < t2 == t1.step < t2.step or t1.step = t2.step and t1.sub < t2.sub
  ; 

  MidiMessage :: channel: nat;
  Event :: msg : MidiMessage ts: TimeStamp;
  Sequence = set of Event
  inv s == forall e,f in set s & e.ts.step = f.ts.step => e.msg <> f.msg
  ;

  State = <playing> | <stop>;

  state Player of
    length: nat
    ts: TimeStamp
    clock: Ticks
    pps: Ticks -- Pulses per step
    sequence: Sequence
    player_state: State
    overflow: set of Event
  inv p == p.ts.step < p.length
  end

operations

TICK() emitted: set of Event
ext wr clock : Ticks
    wr ts: TimeStamp
    wr overflow: set of Event
    rd sequence : Sequence
    rd player_state : State
post
  cases player_state:
    <playing> -> (
      clock = clock~ + 1 and
      ts = get_ts() and
      let passed = get_passed_events(ts~, ts)
      in
        (forall e in set emitted & (forall e2 in set emitted & e.ts = e2.ts) and (forall p in set passed & e.ts < p.ts))
        and overflow = pop(overflow~) union {p| p in set (passed \ emitted)}
    ),
    <playing> -> (
      clock = clock~ and
      ts = ts~ and
      emitted = {}
    )
  end
;

START()
ext wr player_state : State
post
  player_state = <playing>
;

STOP()
ext wr player_state : State
    wr clock : Ticks
    wr ts : TimeStamp
    wr overflow : set of Event
post
  player_state = <stop> and clock = 0 and ts = mk_TimeStamp(0,0) and overflow = {}
;

pure get_ts() new_ts: TimeStamp
post
  (new_ts.step = (clock / pps) rem length) and
  (new_ts.sub = ((clock rem pps) * subs_per_step / pps))
;

pure get_passed_events(old_ts: TimeStamp, new_ts: TimeStamp) emitted: set of Event
pre old_ts <= new_ts
post
  forall e in set sequence & (e.ts > old_ts and e.ts <= new_ts) => e in set emitted
;

functions

pop(o: set of Event) rest: set of Event
post exists popped in set o & popped not in set rest and forall r in set rest & popped.ts < r.ts;

get_pps(divisor: nat, ppq: Ticks) pps: Ticks
post pps = ppq * divisor*4;

end Sequencer
